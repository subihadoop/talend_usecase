// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package projet_dw.prodfileprocessingjob_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: ProdFileProcessingJob Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class ProdFileProcessingJob implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ProdFileProcessingJob";
	private final String projectName = "PROJET_DW";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_8pOb4JllEe2SBLXFU0q9rg", "0.1");
	AssertCatcherUtils tAssertCatcher_1 = new AssertCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ProdFileProcessingJob.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ProdFileProcessingJob.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tChronometerStart_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tChronometerStart_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWaitForFile_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tWaitForFile_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tWaitForFile_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tWaitForFile_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSleep_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tWaitForFile_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tWaitForFile_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAssert_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tAssert_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeter_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tChronometerStop_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tChronometerStop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tForeach_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAssertCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tAssertCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tAssertCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tAssertCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIterateToFlow_1_ITFO_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIterateToFlow_1_AI_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tChronometerStart_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWaitForFile_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAssert_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tChronometerStop_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAssertCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tIterateToFlow_1_AI_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tChronometerStart_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tChronometerStart_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tChronometerStart_1", false);
		start_Hash.put("tChronometerStart_1", System.currentTimeMillis());
		
	
	currentComponent="tChronometerStart_1";

	
		int tos_count_tChronometerStart_1 = 0;
		

	
	
	Long currentTimetChronometerStart_1 = System.currentTimeMillis();
	
	globalMap.put("tChronometerStart_1",currentTimetChronometerStart_1);
	globalMap.put("tChronometerStart_1_STARTTIME", currentTimetChronometerStart_1);
 



/**
 * [tChronometerStart_1 begin ] stop
 */
	
	/**
	 * [tChronometerStart_1 main ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 


	tos_count_tChronometerStart_1++;

/**
 * [tChronometerStart_1 main ] stop
 */
	
	/**
	 * [tChronometerStart_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 process_data_begin ] stop
 */
	
	/**
	 * [tChronometerStart_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 process_data_end ] stop
 */
	
	/**
	 * [tChronometerStart_1 end ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 

ok_Hash.put("tChronometerStart_1", true);
end_Hash.put("tChronometerStart_1", System.currentTimeMillis());




/**
 * [tChronometerStart_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tChronometerStart_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tWaitForFile_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tChronometerStart_1 finally ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", 1);
	}
	

public void tWaitForFile_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWaitForFile_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWaitForFile_1 begin ] start
	 */

				
			int NB_ITERATE_tFileList_1 = 0; //for statistics
						
			int NB_ITERATE_tJava_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tWaitForFile_1", false);
		start_Hash.put("tWaitForFile_1", System.currentTimeMillis());
		
	
	currentComponent="tWaitForFile_1";

	
		int tos_count_tWaitForFile_1 = 0;
		

       
        class Util_tWaitForFile_1 {

            private boolean flagt = false;

            private java.util.regex.Pattern fileNamePatternt = null;
        	private java.util.List<String> list;
			public java.util.List<String> getFiles(){
				setFiles();
				return list;
			}
			private java.util.Map<String, Long> originalTimeMap;
			private java.util.Map<String, String> originalContentMap;
			private boolean initMap = false;
			public Util_tWaitForFile_1(){
			}
			public Util_tWaitForFile_1(boolean iniMap){
				list = new java.util.ArrayList<String>();
				if(iniMap){
					this.initMap = true;
					originalTimeMap = new java.util.HashMap<String, Long>();
					originalContentMap = new java.util.HashMap<String, String>();
				}
			}
			public void addFile(java.io.File file){
				list.add(file.getPath());
				if(initMap){
					originalTimeMap.put(file.getPath(), file.lastModified());
					originalContentMap.put(file.getPath(),getFileChecksum(file));
				}
			}
			public java.util.Map<String, Long> getTimeMap(){
				return originalTimeMap;
			}
			public java.util.Map<String, String> getContentMap(){
				return originalContentMap;
			}
			public String getFileChecksum(java.io.File file) {
            	String strMD5 = "";
            	java.security.MessageDigest complete = null;
            	java.io.InputStream fis = null;
            	try{
                    fis =  new java.io.FileInputStream(file);
                    byte[] buffer = new byte[1024];
                    complete = java.security.MessageDigest.getInstance("MD5");
                    int numRead;
                    while((numRead = fis.read(buffer))!= -1){
                      	if (numRead > 0) {
                        	complete.update(buffer, 0, numRead);
                        }
                    }
                } catch(java.lang.Exception ex) {
                	
                } finally {
                	if(fis != null) {
                		try {
                			fis.close();
                		} catch(java.lang.Exception ex) {
                		
                		}
                	}
                }
               	
               	if(complete != null){
        			byte[] b = complete.digest();
         			for (int i = 0; i < b.length; i++) {
          				strMD5 += Integer.toString( ( b[i] & 0xff ) + 0x100, 16).substring( 1 );
          			}
      			}
        		return strMD5;
            }
            void setFiles() {
                String directoryt = "E:/Subir_files/usecase_1/";
                String filemaskt = "*.csv"+"$";

                if (filemaskt.indexOf("^") == -1) {
                    filemaskt = "^" + filemaskt;
                }
                if (!(filemaskt.lastIndexOf(".*$") == -1) && filemaskt.lastIndexOf("*.*$") == -1) {
                    filemaskt = filemaskt.substring(0, filemaskt.length() - 3) + "$";
                    flagt = true;
                } else {
                    filemaskt = java.util.regex.Pattern.compile("[*]").matcher(filemaskt).replaceAll(".*");
                }

                boolean case_sensitivet = true;
                fileNamePatternt = java.util.regex.Pattern.compile(filemaskt);
                if (!case_sensitivet) {
                    fileNamePatternt = java.util.regex.Pattern.compile(filemaskt, java.util.regex.Pattern.CASE_INSENSITIVE);
                }
                java.io.File filet = new java.io.File(directoryt);
                filet.listFiles(new java.io.FilenameFilter() {

                    public boolean accept(java.io.File dir, String name) {
                        java.io.File file = new java.io.File(dir, name);
                        if (file.isFile()) {
                            String fileNamet = name;
                            if (flagt == true) {
                                if (!(fileNamet.indexOf(".") == -1)) {
                                    if (fileNamePatternt.matcher(fileNamet.substring(0, fileNamet.indexOf("."))).find()) {
                                        addFile(file);

                                    }
                                } else {
                                    if (fileNamePatternt.matcher(fileNamet).find()) {
                                        addFile(file);
                                    }
                                }
                            } else {
                                if (fileNamePatternt.matcher(fileNamet).find()) {
                                    addFile(file);
                                }
                            }

                            return true;
                        }                           
                            else {

                                file.listFiles(this);
                            }
                                              
                        return false;
                    }

                });

            }
			java.util.List<java.io.File> getCreatedFiles(java.util.List<String> originalFiles, java.util.List<String> fetchOneTimeFiles) {
				java.util.List<java.io.File> newCreatedFiles = new java.util.ArrayList<java.io.File>();
				String [] array = originalFiles.toArray(new String[]{});
				for(String file: fetchOneTimeFiles){
					int index = java.util.Arrays.binarySearch(array, file);
					if(index<0){
						newCreatedFiles.add(new java.io.File(file));
					}
				}
				return newCreatedFiles;
			}
			
        }
            
        Util_tWaitForFile_1 util_tWaitForFile_1 = new Util_tWaitForFile_1(true);
        java.util.List<String> originalFiles_tWaitForFile_1 = util_tWaitForFile_1.getFiles();            
            java.util.Map<String,Long> originalMap_tWaitForFile_1 = util_tWaitForFile_1.getTimeMap();
            java.util.Map<String,String> originalContentMap_tWaitForFile_1 = util_tWaitForFile_1.getContentMap();
      
        int count_tWaitForFile_1 = 0;
        
        
        while (true) {                
                if (count_tWaitForFile_1 == 5 ) {
                    break;
                }                
            boolean found_tWaitForFile_1 = false;
				if(globalMap.get("tWaitForFile_1_PRESENT_FILE") != null){
	                globalMap.remove("tWaitForFile_1_PRESENT_FILE");
				}              
    			if( count_tWaitForFile_1 < originalFiles_tWaitForFile_1.size()) {
                    java.io.File file_tWaitForFile_1 = new java.io.File(originalFiles_tWaitForFile_1.get(count_tWaitForFile_1));
					
                    globalMap.put("tWaitForFile_1_FILENAME", file_tWaitForFile_1.getName());
                    globalMap.put("tWaitForFile_1_PRESENT_FILE", file_tWaitForFile_1.getAbsolutePath());
                    found_tWaitForFile_1 = true;
    			} else {
			    
			util_tWaitForFile_1 = new Util_tWaitForFile_1(false);
			
            java.util.List<String> fetchFilesOneTime_tWaitForFile_1 = util_tWaitForFile_1.getFiles();
            
			List<String> intersectionList = new java.util.ArrayList<String>();
			
			for(String cachedFile : originalFiles_tWaitForFile_1)
			{
				if(fetchFilesOneTime_tWaitForFile_1.contains(cachedFile))
				{
					intersectionList.add(cachedFile);
				}
			}     
            
            util_tWaitForFile_1 = new Util_tWaitForFile_1();
	            if(globalMap.get("tWaitForFile_1_DELETED_FILE") != null){
	                globalMap.remove("tWaitForFile_1_DELETED_FILE");
				}
	            if(globalMap.get("tWaitForFile_1_CREATED_FILE") != null){
	                globalMap.remove("tWaitForFile_1_CREATED_FILE");
				}
	            if(globalMap.get("tWaitForFile_1_UPDATED_FILE") != null){
	                globalMap.remove("tWaitForFile_1_UPDATED_FILE");
				}
                java.util.Collections.sort(originalFiles_tWaitForFile_1);
                java.util.Collections.sort(fetchFilesOneTime_tWaitForFile_1);
                String [] arrayFetchFilesOneTime_tWaitForFile_1 = fetchFilesOneTime_tWaitForFile_1.toArray(new String[]{});
                for(String str_tWaitForFile_1 : originalFiles_tWaitForFile_1) {
                	int index_fileall_tWaitForFile_1 = java.util.Arrays.binarySearch(arrayFetchFilesOneTime_tWaitForFile_1,str_tWaitForFile_1);
                    if(index_fileall_tWaitForFile_1 < 0 ) {
	                	java.io.File file_tWaitForFile_1 = new java.io.File(str_tWaitForFile_1);
						
                    	globalMap.put("tWaitForFile_1_FILENAME", file_tWaitForFile_1.getName());
                        globalMap.put("tWaitForFile_1_DELETED_FILE", file_tWaitForFile_1.getAbsolutePath());
                        found_tWaitForFile_1 = true;
                        originalFiles_tWaitForFile_1.remove(str_tWaitForFile_1);
                        originalMap_tWaitForFile_1.remove(str_tWaitForFile_1);
                    	originalContentMap_tWaitForFile_1.remove(str_tWaitForFile_1);
                        break;
                    }
                }
                java.util.List<java.io.File> newCreatedFiles_tWaitForFile_1 = util_tWaitForFile_1.getCreatedFiles(originalFiles_tWaitForFile_1,fetchFilesOneTime_tWaitForFile_1);
                for ( int i=0; i< newCreatedFiles_tWaitForFile_1.size(); i++) {
					java.io.File file_tWaitForFile_1 = newCreatedFiles_tWaitForFile_1.get(i);
           			
					
                    globalMap.put("tWaitForFile_1_FILENAME", file_tWaitForFile_1.getName());
                    globalMap.put("tWaitForFile_1_CREATED_FILE", file_tWaitForFile_1.getAbsolutePath());
                    found_tWaitForFile_1 = true;
                    originalFiles_tWaitForFile_1.add(file_tWaitForFile_1.getPath());           
                    originalMap_tWaitForFile_1.put(file_tWaitForFile_1.getPath(),file_tWaitForFile_1.lastModified());
                    originalContentMap_tWaitForFile_1.put(file_tWaitForFile_1.getPath(),util_tWaitForFile_1.getFileChecksum(file_tWaitForFile_1));
                    break;
				}
                for(String str_tWaitForFile_1 : fetchFilesOneTime_tWaitForFile_1) {
                	java.io.File file_tWaitForFile_1 = new java.io.File(str_tWaitForFile_1);
                	
					
					
					if(originalMap_tWaitForFile_1.get(str_tWaitForFile_1)==null ){
                    	originalMap_tWaitForFile_1.put(str_tWaitForFile_1,file_tWaitForFile_1.lastModified());
                    	originalContentMap_tWaitForFile_1.put(str_tWaitForFile_1,util_tWaitForFile_1.getFileChecksum(file_tWaitForFile_1));
					} else if(originalMap_tWaitForFile_1.get(str_tWaitForFile_1)!=file_tWaitForFile_1.lastModified()) {
                        originalMap_tWaitForFile_1.put(str_tWaitForFile_1,file_tWaitForFile_1.lastModified());//occur repeat value              
                        String fileMD5_tWaitForFile_1 = util_tWaitForFile_1.getFileChecksum(file_tWaitForFile_1);
                        if(!fileMD5_tWaitForFile_1.equals(originalContentMap_tWaitForFile_1.get(str_tWaitForFile_1))){
                        	originalContentMap_tWaitForFile_1.put(str_tWaitForFile_1,fileMD5_tWaitForFile_1);
							
	                    	globalMap.put("tWaitForFile_1_FILENAME", file_tWaitForFile_1.getName());
	                        globalMap.put("tWaitForFile_1_UPDATED_FILE", file_tWaitForFile_1.getAbsolutePath());
	                        found_tWaitForFile_1 = true;
	                        break;
                        }
                    }
                }               
   
                }
            count_tWaitForFile_1++;
            
            globalMap.put("tWaitForFile_1_CURRENT_ITERATION", count_tWaitForFile_1);
            
            if (!found_tWaitForFile_1) {
				
            	Thread.sleep(5 * 1000);
                continue;
            }            
            

 



/**
 * [tWaitForFile_1 begin ] stop
 */
	
	/**
	 * [tWaitForFile_1 main ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

 


	tos_count_tWaitForFile_1++;

/**
 * [tWaitForFile_1 main ] stop
 */
	
	/**
	 * [tWaitForFile_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

 



/**
 * [tWaitForFile_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_1++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("A file was created at " + TalendDate.getCurrentDate()); 
System.out.println("Name of the created file: " + ((String)globalMap.get("tWaitForFile_1_CREATED_FILE")));
System.out.println("Sub process state: " + 
((Integer)globalMap.get("tWaitForFile_1_SUBPROCESS_STATE")));
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_1);
						}				
					




	NB_ITERATE_tFileList_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFileList_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tSleep_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
	
 
     
    
  String directory_tFileList_1 = "E:/Subir_files/usecase_1";
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add("*.csv");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = false;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	
	/**
	 * [tFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tSleep_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tSleep_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tSleep_1 begin ] start
	 */

				
			int NB_ITERATE_tFileExist_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tSleep_1", false);
		start_Hash.put("tSleep_1", System.currentTimeMillis());
		
	
	currentComponent="tSleep_1";

	
		int tos_count_tSleep_1 = 0;
		

 



/**
 * [tSleep_1 begin ] stop
 */
	
	/**
	 * [tSleep_1 main ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

    Thread.sleep((10)*1000);

 


	tos_count_tSleep_1++;

/**
 * [tSleep_1 main ] stop
 */
	
	/**
	 * [tSleep_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileExist_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate8", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate5", 1, "exec" + NB_ITERATE_tFileExist_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileExist_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_1", false);
		start_Hash.put("tFileExist_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_1";

	
		int tos_count_tFileExist_1 = 0;
		

 



/**
 * [tFileExist_1 begin ] stop
 */
	
	/**
	 * [tFileExist_1 main ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	



java.io.File file_tFileExist_1 = new java.io.File((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"));
if (!file_tFileExist_1.exists()) {
    globalMap.put("tFileExist_1_EXISTS",false);
}else{
	globalMap.put("tFileExist_1_EXISTS",true);
}

globalMap.put("tFileExist_1_FILENAME",(String)globalMap.get("tFileList_1_CURRENT_FILEPATH"));


 


	tos_count_tFileExist_1++;

/**
 * [tFileExist_1 main ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_1 end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 

ok_Hash.put("tFileExist_1", true);
end_Hash.put("tFileExist_1", System.currentTimeMillis());

   			if (!(Boolean)globalMap.get("tFileExist_1_EXISTS")) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tDie_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tAssert_1Process(globalMap);
   			if ((Boolean)globalMap.get("tFileExist_1_EXISTS")) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				
    			tFileInputDelimited_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate5", 2, "exec" + NB_ITERATE_tFileExist_1);
						}				
					




	
	/**
	 * [tSleep_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 process_data_end ] stop
 */
	
	/**
	 * [tSleep_1 end ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 

ok_Hash.put("tSleep_1", true);
end_Hash.put("tSleep_1", System.currentTimeMillis());




/**
 * [tSleep_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tSleep_1);
						}				
					




	
	/**
	 * [tFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

    if (NB_FILEtFileList_1 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_1);
  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFileList_1);
						}				
					




	
	/**
	 * [tWaitForFile_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

 



/**
 * [tWaitForFile_1 process_data_end ] stop
 */
	
	/**
	 * [tWaitForFile_1 end ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

    if(false){
        break;
    }
}


 

ok_Hash.put("tWaitForFile_1", true);
end_Hash.put("tWaitForFile_1", System.currentTimeMillis());




/**
 * [tWaitForFile_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tWaitForFile_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWaitForFile_1 finally ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

 



/**
 * [tWaitForFile_1 finally ] stop
 */

	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */




	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tSleep_1 finally ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 finally ] stop
 */

	
	/**
	 * [tFileExist_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWaitForFile_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


System.out.println("\r\nIteration loop ended at " + TalendDate.getCurrentDate()); System.out.println("Number of iterations finished: " + ((Integer)globalMap.get("tWaitForFile_1_CURRENT_ITERATION")));
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, jobName + ": cannot open file " + (String) globalMap.get("contextFile"), 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println(jobName + ": cannot open file " + (String) globalMap.get("contextFile"));
	
	globalMap.put("tDie_1_DIE_MESSAGE", jobName + ": cannot open file " + (String) globalMap.get("contextFile"));
	globalMap.put("tDie_1_DIE_MESSAGES", jobName + ": cannot open file " + (String) globalMap.get("contextFile"));
	
	} catch (Exception | Error e_tDie_1) {
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	

public void tAssert_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAssert_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tAssert_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAssert_1", false);
		start_Hash.put("tAssert_1", System.currentTimeMillis());
		
	
	currentComponent="tAssert_1";

	
		int tos_count_tAssert_1 = 0;
		

 



/**
 * [tAssert_1 begin ] stop
 */
	
	/**
	 * [tAssert_1 main ] start
	 */

	

	
	
	currentComponent="tAssert_1";

	


 if((Boolean)globalMap.get("tFileExist_1_EXISTS")) {
	tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", "tAssert_1", "Ok", "--", "File check Done");
	tAssertCatcher_1Process(globalMap);
}else {
	tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", "tAssert_1", "Failed", "Test logically failed", "File check Done");
	tAssertCatcher_1Process(globalMap);	
}					

 


	tos_count_tAssert_1++;

/**
 * [tAssert_1 main ] stop
 */
	
	/**
	 * [tAssert_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAssert_1";

	

 



/**
 * [tAssert_1 process_data_begin ] stop
 */
	
	/**
	 * [tAssert_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAssert_1";

	

 



/**
 * [tAssert_1 process_data_end ] stop
 */
	
	/**
	 * [tAssert_1 end ] start
	 */

	

	
	
	currentComponent="tAssert_1";

	

 

ok_Hash.put("tAssert_1", true);
end_Hash.put("tAssert_1", System.currentTimeMillis());




/**
 * [tAssert_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tAssert_1 finally ] start
	 */

	

	
	
	currentComponent="tAssert_1";

	

 



/**
 * [tAssert_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAssert_1_SUBPROCESS_STATE", 1);
	}
	


public static class OnSubjobOkStructtIterateToFlow_1 implements routines.system.IPersistableRow<OnSubjobOkStructtIterateToFlow_1> {
    final static byte[] commonByteArrayLock_PROJET_DW_ProdFileProcessingJob = new byte[0];
    static byte[] commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[0];

	
			    public Integer slno;

				public Integer getSlno () {
					return this.slno;
				}
				
			    public String account_id;

				public String getAccount_id () {
					return this.account_id;
				}
				
			    public Integer district_id;

				public Integer getDistrict_id () {
					return this.district_id;
				}
				
			    public String frequency;

				public String getFrequency () {
					return this.frequency;
				}
				
			    public String parseddate;

				public String getParseddate () {
					return this.parseddate;
				}
				
			    public Integer year;

				public Integer getYear () {
					return this.year;
				}
				
			    public Integer month;

				public Integer getMonth () {
					return this.month;
				}
				
			    public Integer day;

				public Integer getDay () {
					return this.day;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public String smoker;

				public String getSmoker () {
					return this.smoker;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PROJET_DW_ProdFileProcessingJob.length) {
				if(length < 1024 && commonByteArray_PROJET_DW_ProdFileProcessingJob.length == 0) {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[1024];
				} else {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length);
			strReturn = new String(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PROJET_DW_ProdFileProcessingJob) {

        	try {

        		int length = 0;
		
						this.slno = readInteger(dis);
					
					this.account_id = readString(dis);
					
						this.district_id = readInteger(dis);
					
					this.frequency = readString(dis);
					
					this.parseddate = readString(dis);
					
						this.year = readInteger(dis);
					
						this.month = readInteger(dis);
					
						this.day = readInteger(dis);
					
					this.gender = readString(dis);
					
					this.smoker = readString(dis);
					
					this.Country = readString(dis);
					
					this.Region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.slno,dos);
					
					// String
				
						writeString(this.account_id,dos);
					
					// Integer
				
						writeInteger(this.district_id,dos);
					
					// String
				
						writeString(this.frequency,dos);
					
					// String
				
						writeString(this.parseddate,dos);
					
					// Integer
				
						writeInteger(this.year,dos);
					
					// Integer
				
						writeInteger(this.month,dos);
					
					// Integer
				
						writeInteger(this.day,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// String
				
						writeString(this.smoker,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.Region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("slno="+String.valueOf(slno));
		sb.append(",account_id="+account_id);
		sb.append(",district_id="+String.valueOf(district_id));
		sb.append(",frequency="+frequency);
		sb.append(",parseddate="+parseddate);
		sb.append(",year="+String.valueOf(year));
		sb.append(",month="+String.valueOf(month));
		sb.append(",day="+String.valueOf(day));
		sb.append(",gender="+gender);
		sb.append(",smoker="+smoker);
		sb.append(",Country="+Country);
		sb.append(",Region="+Region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnSubjobOkStructtIterateToFlow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PROJET_DW_ProdFileProcessingJob = new byte[0];
    static byte[] commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[0];

	
			    public Integer slno;

				public Integer getSlno () {
					return this.slno;
				}
				
			    public String account_id;

				public String getAccount_id () {
					return this.account_id;
				}
				
			    public Integer district_id;

				public Integer getDistrict_id () {
					return this.district_id;
				}
				
			    public String frequency;

				public String getFrequency () {
					return this.frequency;
				}
				
			    public String parseddate;

				public String getParseddate () {
					return this.parseddate;
				}
				
			    public Integer year;

				public Integer getYear () {
					return this.year;
				}
				
			    public Integer month;

				public Integer getMonth () {
					return this.month;
				}
				
			    public Integer day;

				public Integer getDay () {
					return this.day;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public String smoker;

				public String getSmoker () {
					return this.smoker;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PROJET_DW_ProdFileProcessingJob.length) {
				if(length < 1024 && commonByteArray_PROJET_DW_ProdFileProcessingJob.length == 0) {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[1024];
				} else {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length);
			strReturn = new String(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PROJET_DW_ProdFileProcessingJob) {

        	try {

        		int length = 0;
		
						this.slno = readInteger(dis);
					
					this.account_id = readString(dis);
					
						this.district_id = readInteger(dis);
					
					this.frequency = readString(dis);
					
					this.parseddate = readString(dis);
					
						this.year = readInteger(dis);
					
						this.month = readInteger(dis);
					
						this.day = readInteger(dis);
					
					this.gender = readString(dis);
					
					this.smoker = readString(dis);
					
					this.Country = readString(dis);
					
					this.Region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.slno,dos);
					
					// String
				
						writeString(this.account_id,dos);
					
					// Integer
				
						writeInteger(this.district_id,dos);
					
					// String
				
						writeString(this.frequency,dos);
					
					// String
				
						writeString(this.parseddate,dos);
					
					// Integer
				
						writeInteger(this.year,dos);
					
					// Integer
				
						writeInteger(this.month,dos);
					
					// Integer
				
						writeInteger(this.day,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// String
				
						writeString(this.smoker,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.Region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("slno="+String.valueOf(slno));
		sb.append(",account_id="+account_id);
		sb.append(",district_id="+String.valueOf(district_id));
		sb.append(",frequency="+frequency);
		sb.append(",parseddate="+parseddate);
		sb.append(",year="+String.valueOf(year));
		sb.append(",month="+String.valueOf(month));
		sb.append(",day="+String.valueOf(day));
		sb.append(",gender="+gender);
		sb.append(",smoker="+smoker);
		sb.append(",Country="+Country);
		sb.append(",Region="+Region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

	
				TalendThreadPool mtp_tIterateToFlow_1_ITFO = new TalendThreadPool(4);

				globalMap.put("lockWrite_tIterateToFlow_1_ITFO", new Object[0]);
				int threadIdCounter_tIterateToFlow_1_ITFO =0;
						
			int NB_ITERATE_tIterateToFlow_1_ITFO = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

				
			int NB_ITERATE_tForeach_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;	
				
				char fieldSeparator_tFileInputDelimited_2[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_2[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_2 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */"E:/Subir_files/usecase_1/completedacct1.csv"/** End field tFileInputDelimited_2:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;
	
				try{
					
						String[] rowtFileInputDelimited_2=null;
						int currentLinetFileInputDelimited_2 = 0;
	        			int outputLinetFileInputDelimited_2 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0;
			if(footer_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"UTF-8")), fieldSeparator_tFileInputDelimited_2[0]);
		        			}
					
					
					csvReadertFileInputDelimited_2.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )
	        			csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
	        				csvReadertFileInputDelimited_2.setQuoteChar('\"');
						
	            				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_2 > 0){
						for(totalLinetFileInputDelimited_2=0;totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++){
							csvReadertFileInputDelimited_2.readNext();
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_2.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_2++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2   < 0? 0 : totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2 ;
	            		if(lastLinetFileInputDelimited_2 > 0){
	                		lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2 : lastLineTemptFileInputDelimited_2; 
	            		}else {
	                		lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
	            		}
	         
			          	csvReadertFileInputDelimited_2.close();
				        if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"UTF-8")), fieldSeparator_tFileInputDelimited_2[0]);
						}
						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )	
	        				csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
							csvReadertFileInputDelimited_2.setQuoteChar('\"');
						
	        				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_2 != 0){
			        	for(currentLinetFileInputDelimited_2=0;currentLinetFileInputDelimited_2 < 1;currentLinetFileInputDelimited_2++){
			        		csvReadertFileInputDelimited_2.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2!=null && csvReadertFileInputDelimited_2.readNext() ) { 
	        		rowstate_tFileInputDelimited_2.reset();
	        
		        	rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_2++;
	            
		            if(lastLinetFileInputDelimited_2 > -1 && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_2++;
	            	if (limittFileInputDelimited_2 > 0 && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
	                	break;
	            	}  
	                                                                      
					
	    							row2 = null;			
								
								boolean whetherReject_tFileInputDelimited_2 = false;
								row2 = new row2Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row2.slno = null;
					
							row2.account_id = null;
					
							row2.district_id = null;
					
							row2.frequency = null;
					
							row2.parseddate = null;
					
							row2.year = null;
					
							row2.month = null;
					
							row2.day = null;
					
							row2.gender = null;
					
							row2.smoker = null;
					
							row2.Country = null;
					
							row2.Region = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.slno = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"slno", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.slno = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.slno = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.account_id = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.account_id = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.district_id = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"district_id", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.district_id = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.district_id = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.frequency = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.frequency = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.parseddate = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.parseddate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.year = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"year", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.year = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.year = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.month = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"month", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.month = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.month = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.day = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"day", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.day = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.day = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.gender = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.gender = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.smoker = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.smoker = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Country = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Country = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Region = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Region = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_2.getException()!=null) {
										throw rowstate_tFileInputDelimited_2.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_2 = true;
        							
                							System.err.println(e.getMessage());
                							row2 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


    	            
            globalMap.put("row2.slno", row2.slno);
    	            
            globalMap.put("row2.account_id", row2.account_id);
    	            
            globalMap.put("row2.district_id", row2.district_id);
    	            
            globalMap.put("row2.frequency", row2.frequency);
    	            
            globalMap.put("row2.parseddate", row2.parseddate);
    	            
            globalMap.put("row2.year", row2.year);
    	            
            globalMap.put("row2.month", row2.month);
    	            
            globalMap.put("row2.day", row2.day);
    	            
            globalMap.put("row2.gender", row2.gender);
    	            
            globalMap.put("row2.smoker", row2.smoker);
    	            
            globalMap.put("row2.Country", row2.Country);
    	            
            globalMap.put("row2.Region", row2.Region);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tIterateToFlow_1_ITFO++;
	
				
			class tIterateToFlow_1_ITFOThread extends TalendThread {//implements routines.system.TalendThreadPool.PropertySettable
				class ThreadedMap extends java.util.HashMap<String, Object> {
			
					private static final long serialVersionUID = 0L;
		
					public ThreadedMap(java.util.Map<String, Object> globalMap) {
						super(globalMap);
					}
		
					@Override
					public Object put(String key, Object value) {
						
						synchronized (ProdFileProcessingJob.this.obj) {
						
							super.put(key, value);
							return ProdFileProcessingJob.this.globalMap.put(key, value);
						
						}
						
					}
				}	
				
				private java.util.Map<String, Object> globalMap = null;
				boolean isRunning = false;
				String iterateId = "";
				
				
						row2Struct row2 = new row2Struct();

					
	
				public tIterateToFlow_1_ITFOThread(java.util.Map<String, Object> globalMap,row2Struct row2, int threadID) {
					super();
					
		        		if(row2 != null){
		            		
		    					this.row2.slno = row2.slno;
		    	            
		    					this.row2.account_id = row2.account_id;
		    	            
		    					this.row2.district_id = row2.district_id;
		    	            
		    					this.row2.frequency = row2.frequency;
		    	            
		    					this.row2.parseddate = row2.parseddate;
		    	            
		    					this.row2.year = row2.year;
		    	            
		    					this.row2.month = row2.month;
		    	            
		    					this.row2.day = row2.day;
		    	            
		    					this.row2.gender = row2.gender;
		    	            
		    					this.row2.smoker = row2.smoker;
		    	            
		    					this.row2.Country = row2.Country;
		    	            
		    					this.row2.Region = row2.Region;
		    	            
		        		}
		        		
					
						synchronized (ProdFileProcessingJob.this.obj) {
							this.globalMap = new ThreadedMap(globalMap);
					
						}
					iterateId = "." + threadID;
					
					
				}


				public void run() {		
		
					java.util.Map threadRunResultMap = new java.util.HashMap();
					threadRunResultMap.put("errorCode", null);
					threadRunResultMap.put("status", "");
					threadLocal.set(threadRunResultMap);
					
					this.isRunning = true;
					String currentComponent = "";
					java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();
					
						String currentVirtualComponent = null;
					
					try {			
						
							if(execStat){
								runStat.updateStatOnConnection("iterate4",0,"exec"+iterateId);
							}				
						

	
	/**
	 * [tIterateToFlow_1_ITFO begin ] start
	 */

	

	
		
		ok_Hash.put("tIterateToFlow_1_ITFO", false);
		start_Hash.put("tIterateToFlow_1_ITFO", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_ITFO";

	
		int tos_count_tIterateToFlow_1_ITFO = 0;
		

OnSubjobOkStructtIterateToFlow_1 struct_tIterateToFlow_1_ITFO = new OnSubjobOkStructtIterateToFlow_1();
struct_tIterateToFlow_1_ITFO.slno  = ((Integer)globalMap.get("row2.slno"));
struct_tIterateToFlow_1_ITFO.account_id  = ((String)globalMap.get("row2.account_id"));
struct_tIterateToFlow_1_ITFO.district_id  = ((Integer)globalMap.get("row2.distinct_id"));
struct_tIterateToFlow_1_ITFO.frequency  = ((String)globalMap.get("row2.frequency"));
struct_tIterateToFlow_1_ITFO.parseddate  = ((String)globalMap.get("row2.parseddate"));
struct_tIterateToFlow_1_ITFO.year  = ((Integer)globalMap.get("row2.year"));
struct_tIterateToFlow_1_ITFO.month  = ((Integer)globalMap.get("row2.month"));
struct_tIterateToFlow_1_ITFO.day  = ((Integer)globalMap.get("row2.day"));
struct_tIterateToFlow_1_ITFO.gender  = ((String)globalMap.get("row2.gender"));
struct_tIterateToFlow_1_ITFO.smoker  = ((String)globalMap.get("row2.smoker"));
struct_tIterateToFlow_1_ITFO.Country  = ((String)globalMap.get("row2.Country"));
struct_tIterateToFlow_1_ITFO.Region  = ((String)globalMap.get("row2.Region"));

	
		synchronized (ProdFileProcessingJob.this.obj) {
	
		    if(ProdFileProcessingJob.this.globalMap.containsKey("tIterateToFlow_1")){
		    	java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_ITFO = (java.util.List<OnSubjobOkStructtIterateToFlow_1>)ProdFileProcessingJob.this.globalMap.get("tIterateToFlow_1"); 
		    	list_tIterateToFlow_1_ITFO.add(struct_tIterateToFlow_1_ITFO);
		    }else{
		    	java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_ITFO = java.util.Collections.synchronizedList(new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_1>());
		    	list_tIterateToFlow_1_ITFO.add(struct_tIterateToFlow_1_ITFO);
		    	ProdFileProcessingJob.this.globalMap.put("tIterateToFlow_1",list_tIterateToFlow_1_ITFO);
		    }
		}
 



/**
 * [tIterateToFlow_1_ITFO begin ] stop
 */
	
	/**
	 * [tIterateToFlow_1_ITFO main ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_ITFO";

	

 


	tos_count_tIterateToFlow_1_ITFO++;

/**
 * [tIterateToFlow_1_ITFO main ] stop
 */
	
	/**
	 * [tIterateToFlow_1_ITFO process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_ITFO";

	

 



/**
 * [tIterateToFlow_1_ITFO process_data_begin ] stop
 */
	
	/**
	 * [tIterateToFlow_1_ITFO process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_ITFO";

	

 



/**
 * [tIterateToFlow_1_ITFO process_data_end ] stop
 */
	
	/**
	 * [tIterateToFlow_1_ITFO end ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_ITFO";

	

 

ok_Hash.put("tIterateToFlow_1_ITFO", true);
end_Hash.put("tIterateToFlow_1_ITFO", System.currentTimeMillis());




/**
 * [tIterateToFlow_1_ITFO end ] stop
 */
					if(execStat){
						runStat.updateStatOnConnection("iterate4",2,"exec"+iterateId);
					}				
				
						} catch (java.lang.Exception e) {
							this.status = "failure";
							Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
							if (localErrorCode != null) {
								if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
									this.errorCode = localErrorCode;
								}
							}					
				            		            
		                    TalendException te = new TalendException(e, currentComponent, globalMap);
							
								te.setVirtualComponentName(currentVirtualComponent);
							
							this.exception = te;
							talendThreadPool.setErrorThread(this);
				            talendThreadPool.stopAllWorkers();
	
						} catch (java.lang.Error error){
							this.status = "failure";
							Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
							if (localErrorCode != null) {
								if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
									this.errorCode = localErrorCode;
								}
							}					
							this.error = error;				            		            
							talendThreadPool.setErrorThread(this);
				            talendThreadPool.stopAllWorkers();
						} finally {
							try{
								
	
	/**
	 * [tIterateToFlow_1_ITFO finally ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_ITFO";

	

 



/**
 * [tIterateToFlow_1_ITFO finally ] stop
 */
							}catch(java.lang.Exception e){	
								//ignore
							}catch(java.lang.Error error){
								//ignore
							}
							resourceMap = null;
						}
						this.isRunning = false;
				
						Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
						String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
						if (localErrorCode != null) {
							if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
								this.errorCode = localErrorCode;
							}
						} 
						if (!this.status.equals("failure")) {
							this.status = localStatus;
						}
						
						talendThreadPool.getTalendThreadResult().setErrorCode(this.errorCode);
						talendThreadPool.getTalendThreadResult().setStatus(this.status);						
					}
				}

				tIterateToFlow_1_ITFOThread bt_tIterateToFlow_1_ITFO = new tIterateToFlow_1_ITFOThread(globalMap,row2,threadIdCounter_tIterateToFlow_1_ITFO++);
				mtp_tIterateToFlow_1_ITFO.execute(bt_tIterateToFlow_1_ITFO);

				




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "row2"




	NB_ITERATE_tForeach_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate7", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate8", 1, "exec" + NB_ITERATE_tForeach_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tForeach_1 begin ] start
	 */

				
			int NB_ITERATE_tJava_3 = 0; //for statistics
			

	
		
		ok_Hash.put("tForeach_1", false);
		start_Hash.put("tForeach_1", System.currentTimeMillis());
		
	
	currentComponent="tForeach_1";

	
		int tos_count_tForeach_1 = 0;
		


Object[] values_tForeach_1 = new Object[]{
    "completedacct",
};

for(Object tmp_tForeach_1 :values_tForeach_1) {
	
    globalMap.put("tForeach_1_CURRENT_VALUE", tmp_tForeach_1);

 



/**
 * [tForeach_1 begin ] stop
 */
	
	/**
	 * [tForeach_1 main ] start
	 */

	

	
	
	currentComponent="tForeach_1";

	

 


	tos_count_tForeach_1++;

/**
 * [tForeach_1 main ] stop
 */
	
	/**
	 * [tForeach_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tForeach_1";

	

 



/**
 * [tForeach_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_3++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate7", 1, "exec" + NB_ITERATE_tJava_3);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


System.out.println(globalMap.get("tForeach_1_CURRENT_VALUE")  + "" + (TalendDate.getCurrentDate()) );
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate7", 2, "exec" + NB_ITERATE_tJava_3);
						}				
					




	
	/**
	 * [tForeach_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tForeach_1";

	

 



/**
 * [tForeach_1 process_data_end ] stop
 */
	
	/**
	 * [tForeach_1 end ] start
	 */

	

	
	
	currentComponent="tForeach_1";

	

}

 

ok_Hash.put("tForeach_1", true);
end_Hash.put("tForeach_1", System.currentTimeMillis());




/**
 * [tForeach_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate8", 2, "exec" + NB_ITERATE_tForeach_1);
						}				
					




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	


				nb_line_tFileInputDelimited_2++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_2!=null){
    					csvReadertFileInputDelimited_2.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_2!=null){
    				globalMap.put("tFileInputDelimited_2_NB_LINE",nb_line_tFileInputDelimited_2);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());


			mtp_tIterateToFlow_1_ITFO.waitForEndOfQueue();
			
			TalendThread errorThread_tIterateToFlow_1_ITFO = mtp_tIterateToFlow_1_ITFO.getErrorThread();

	if(errorThread_tIterateToFlow_1_ITFO != null) {
		if (errorThread_tIterateToFlow_1_ITFO.errorCode != null) {
			if (errorCode == null
					|| errorThread_tIterateToFlow_1_ITFO.errorCode.compareTo(errorCode) > 0) {
				errorCode = errorThread_tIterateToFlow_1_ITFO.errorCode;
			}
		} 
		if (!status.equals("failure")) {
			status = errorThread_tIterateToFlow_1_ITFO.status;
		}
		if(errorThread_tIterateToFlow_1_ITFO.exception!=null){
			throw errorThread_tIterateToFlow_1_ITFO.exception;
		}
		if(errorThread_tIterateToFlow_1_ITFO.error!=null){
			throw errorThread_tIterateToFlow_1_ITFO.error;
		}
	}else{				
		Integer threadErrorCode = mtp_tIterateToFlow_1_ITFO.getTalendThreadResult().getErrorCode();
		String threadStatus = mtp_tIterateToFlow_1_ITFO.getTalendThreadResult().getStatus();
		
		if (threadErrorCode != null) {
			if (errorCode == null
					|| threadErrorCode.compareTo(errorCode) > 0) {
				errorCode = threadErrorCode;
			}
		} 
		if (!status.equals("failure")) {
			status = threadStatus;
		}
	 }			
			
			


/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk", 0, "ok");
								} 
							
							tIterateToFlow_1_AIProcess(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */




	
	/**
	 * [tForeach_1 finally ] start
	 */

	

	
	
	currentComponent="tForeach_1";

	

 



/**
 * [tForeach_1 finally ] stop
 */

	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	

public void tChronometerStop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tChronometerStop_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tChronometerStop_1", false);
		start_Hash.put("tChronometerStop_1", System.currentTimeMillis());
		
	
	currentComponent="tChronometerStop_1";

	
		int tos_count_tChronometerStop_1 = 0;
		
	
	long timetChronometerStop_1;
	
		timetChronometerStop_1 = System.currentTimeMillis() - startTime;
		
	   		System.out.print("[ tChronometerStop_1 ]  ");
		
	  	System.out.println("" + "  " + timetChronometerStop_1 + " milliseconds");
	  	 
	
	Long currentTimetChronometerStop_1 = System.currentTimeMillis();
	globalMap.put("tChronometerStop_1", currentTimetChronometerStop_1);
	
	globalMap.put("tChronometerStop_1_STOPTIME", currentTimetChronometerStop_1);
	globalMap.put("tChronometerStop_1_DURATION", timetChronometerStop_1);
 



/**
 * [tChronometerStop_1 begin ] stop
 */
	
	/**
	 * [tChronometerStop_1 main ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 


	tos_count_tChronometerStop_1++;

/**
 * [tChronometerStop_1 main ] stop
 */
	
	/**
	 * [tChronometerStop_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 process_data_begin ] stop
 */
	
	/**
	 * [tChronometerStop_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 process_data_end ] stop
 */
	
	/**
	 * [tChronometerStop_1 end ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 

ok_Hash.put("tChronometerStop_1", true);
end_Hash.put("tChronometerStop_1", System.currentTimeMillis());




/**
 * [tChronometerStop_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tChronometerStop_1 finally ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PROJET_DW_ProdFileProcessingJob = new byte[0];
    static byte[] commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String language;

				public String getLanguage () {
					return this.language;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String substatus;

				public String getSubstatus () {
					return this.substatus;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PROJET_DW_ProdFileProcessingJob.length) {
				if(length < 1024 && commonByteArray_PROJET_DW_ProdFileProcessingJob.length == 0) {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[1024];
				} else {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length);
			strReturn = new String(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PROJET_DW_ProdFileProcessingJob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.language = readString(dis);
					
					this.origin = readString(dis);
					
					this.status = readString(dis);
					
					this.substatus = readString(dis);
					
					this.description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.language,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.substatus,dos);
					
					// String
				
						writeString(this.description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",language="+language);
		sb.append(",origin="+origin);
		sb.append(",status="+status);
		sb.append(",substatus="+substatus);
		sb.append(",description="+description);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PROJET_DW_ProdFileProcessingJob = new byte[0];
    static byte[] commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String language;

				public String getLanguage () {
					return this.language;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String substatus;

				public String getSubstatus () {
					return this.substatus;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PROJET_DW_ProdFileProcessingJob.length) {
				if(length < 1024 && commonByteArray_PROJET_DW_ProdFileProcessingJob.length == 0) {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[1024];
				} else {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length);
			strReturn = new String(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PROJET_DW_ProdFileProcessingJob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.language = readString(dis);
					
					this.origin = readString(dis);
					
					this.status = readString(dis);
					
					this.substatus = readString(dis);
					
					this.description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.language,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.substatus,dos);
					
					// String
				
						writeString(this.description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",language="+language);
		sb.append(",origin="+origin);
		sb.append(",status="+status);
		sb.append(",substatus="+substatus);
		sb.append(",description="+description);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAssertCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAssertCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row3Struct row5 = row3;





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_2 = 0;
		





        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;

int rejectedCount_tDBOutput_2=0;

String tableName_tDBOutput_2 = "file_log_asstercatcher";
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
long date_tDBOutput_2;

java.sql.Connection conn_tDBOutput_2 = null;
		String dbProperties_tDBOutput_2 = "noDatetimeStringSync=true&useSSL=False&allowPublicKeyRetrieval=true";
		String url_tDBOutput_2 = null;
		if(dbProperties_tDBOutput_2 == null || dbProperties_tDBOutput_2.trim().length() == 0) {
			url_tDBOutput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "store" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_2 = "noDatetimeStringSync=true&useSSL=False&allowPublicKeyRetrieval=true";
			if (!properties_tDBOutput_2.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "store" + "?" + properties_tDBOutput_2;
		}
		String driverClass_tDBOutput_2 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_2 = "root";
		

		 
	final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("1acf40cfe207fe162908c1916a83b9e5");

		String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
		java.lang.Class.forName(driverClass_tDBOutput_2);
		
		conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);
		
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;

int count_tDBOutput_2=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
                                boolean whetherExist_tDBOutput_2 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables("store", null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_2.next()) {
                                        String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
                                        if(table_tDBOutput_2.equalsIgnoreCase("file_log_asstercatcher")) {
                                            whetherExist_tDBOutput_2 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_2) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                        stmtCreate_tDBOutput_2.execute("CREATE TABLE `" + tableName_tDBOutput_2 + "`(`moment` DATETIME ,`pid` VARCHAR(20)  ,`project` VARCHAR(50)  ,`job` VARCHAR(255)  ,`language` VARCHAR(5)  ,`origin` VARCHAR(50)  ,`status` VARCHAR(10)  ,`substatus` VARCHAR(255)  ,`description` VARCHAR(255)  ,primary key(`moment`))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM `" + "file_log_asstercatcher" + "` WHERE `moment` = ?");
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    String insert_tDBOutput_2 = "INSERT INTO `" + "file_log_asstercatcher" + "` (`moment`,`pid`,`project`,`job`,`language`,`origin`,`status`,`substatus`,`description`) VALUES (?,?,?,?,?,?,?,?,?)";
	        
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
	    String update_tDBOutput_2 = "UPDATE `" + "file_log_asstercatcher" + "` SET `pid` = ?,`project` = ?,`job` = ?,`language` = ?,`origin` = ?,`status` = ?,`substatus` = ?,`description` = ? WHERE `moment` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[9];

        public void addRow(String[] row) {

            for (int i = 0; i < 9; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 8 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 8 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[8] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("tLogRow_2");
        util_tLogRow_2.addRow(new String[]{"moment","pid","project","job","language","origin","status","substatus","description",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tAssertCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAssertCatcher_1", false);
		start_Hash.put("tAssertCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tAssertCatcher_1";

	
		int tos_count_tAssertCatcher_1 = 0;
		

	for (AssertCatcherUtils.AssertCatcherMessage acm : tAssertCatcher_1.getMessages()) {
		row3.moment = acm.getMoment();
		row3.pid = acm.getPid();
		row3.project = acm.getProject();
		row3.job = acm.getJob();
		row3.language = acm.getLanguage();
		
		row3.origin = (acm.getOrigin()==null || acm.getOrigin().length()<1 ? null : acm.getOrigin());
	
    	row3.status = acm.getStatus();
		row3.substatus = acm.getSubstatus();
		row3.description = acm.getDescription();
		
 



/**
 * [tAssertCatcher_1 begin ] stop
 */
	
	/**
	 * [tAssertCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tAssertCatcher_1";

	

 


	tos_count_tAssertCatcher_1++;

/**
 * [tAssertCatcher_1 main ] stop
 */
	
	/**
	 * [tAssertCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAssertCatcher_1";

	

 



/**
 * [tAssertCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[9];
   				
	    		if(row3.moment != null) { //              
                 row_tLogRow_2[0]=    						
								FormatterUtils.format_Date(row3.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(row3.pid != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(row3.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.project != null) { //              
                 row_tLogRow_2[2]=    						    
				                String.valueOf(row3.project)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.job != null) { //              
                 row_tLogRow_2[3]=    						    
				                String.valueOf(row3.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.language != null) { //              
                 row_tLogRow_2[4]=    						    
				                String.valueOf(row3.language)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.origin != null) { //              
                 row_tLogRow_2[5]=    						    
				                String.valueOf(row3.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.status != null) { //              
                 row_tLogRow_2[6]=    						    
				                String.valueOf(row3.status)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.substatus != null) { //              
                 row_tLogRow_2[7]=    						    
				                String.valueOf(row3.substatus)			
					          ;	
							
	    		} //			
    			   				
	    		if(row3.description != null) { //              
                 row_tLogRow_2[8]=    						    
				                String.valueOf(row3.description)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     row5 = row3;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_2 = false;
                    if(row5.moment != null) {
date_tDBOutput_2 = row5.moment.getTime();
if(date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
pstmt_tDBOutput_2.setString(1, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_2.setTimestamp(1, new java.sql.Timestamp(date_tDBOutput_2));
}
} else {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.DATE);
}

            int checkCount_tDBOutput_2 = -1;
            try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
                while(rs_tDBOutput_2.next()) {
                    checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
                }
            }
            if(checkCount_tDBOutput_2 > 0) {
                        if(row5.pid == null) {
pstmtUpdate_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(1, row5.pid);
}

                        if(row5.project == null) {
pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(2, row5.project);
}

                        if(row5.job == null) {
pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(3, row5.job);
}

                        if(row5.language == null) {
pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(4, row5.language);
}

                        if(row5.origin == null) {
pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(5, row5.origin);
}

                        if(row5.status == null) {
pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(6, row5.status);
}

                        if(row5.substatus == null) {
pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(7, row5.substatus);
}

                        if(row5.description == null) {
pstmtUpdate_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(8, row5.description);
}

                        if(row5.moment != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(9 + count_tDBOutput_2, new java.sql.Timestamp(row5.moment.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(9 + count_tDBOutput_2, java.sql.Types.TIMESTAMP);
}

                try {
                    updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2 + pstmtUpdate_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(row5.moment != null) {
date_tDBOutput_2 = row5.moment.getTime();
if(date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
pstmtInsert_tDBOutput_2.setString(1, "0000-00-00 00:00:00");
} else {pstmtInsert_tDBOutput_2.setTimestamp(1, new java.sql.Timestamp(date_tDBOutput_2));
}
} else {
pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.DATE);
}

                        if(row5.pid == null) {
pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(2, row5.pid);
}

                        if(row5.project == null) {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(3, row5.project);
}

                        if(row5.job == null) {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(4, row5.job);
}

                        if(row5.language == null) {
pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(5, row5.language);
}

                        if(row5.origin == null) {
pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(6, row5.origin);
}

                        if(row5.status == null) {
pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(7, row5.status);
}

                        if(row5.substatus == null) {
pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(8, row5.substatus);
}

                        if(row5.description == null) {
pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(9, row5.description);
}

                try {
                    insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2 + pstmtInsert_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            }
                commitCounter_tDBOutput_2++;

                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

                    conn_tDBOutput_2.commit();
                    commitCounter_tDBOutput_2=0;

                }


 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */



	
	/**
	 * [tAssertCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAssertCatcher_1";

	

 



/**
 * [tAssertCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tAssertCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tAssertCatcher_1";

	
	}
 

ok_Hash.put("tAssertCatcher_1", true);
end_Hash.put("tAssertCatcher_1", System.currentTimeMillis());




/**
 * [tAssertCatcher_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



        if(pstmtUpdate_tDBOutput_2 != null){
            pstmtUpdate_tDBOutput_2.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_2");
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
    	if (commitCounter_tDBOutput_2 > 0) {
    		
    		conn_tDBOutput_2.commit();
    		
    	}
    		
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tAssertCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tAssertCatcher_1";

	

 



/**
 * [tAssertCatcher_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
                if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_2")) != null) {
                    pstmtUpdateToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
                if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_2")) != null) {
                    pstmtInsertToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAssertCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
	
		projet_dw.file_clensing_job_0_1.file_clensing_job childJob_tRunJob_1 = new projet_dw.file_clensing_job_0_1.file_clensing_job();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getException().getClass().getName() + ": " + childJob_tRunJob_1.getException().getMessage());
				}
			
	  	

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tChronometerStart_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_PROJET_DW_ProdFileProcessingJob = new byte[0];
    static byte[] commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PROJET_DW_ProdFileProcessingJob.length) {
				if(length < 1024 && commonByteArray_PROJET_DW_ProdFileProcessingJob.length == 0) {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[1024];
				} else {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length);
			strReturn = new String(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PROJET_DW_ProdFileProcessingJob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class mainStruct implements routines.system.IPersistableRow<mainStruct> {
    final static byte[] commonByteArrayLock_PROJET_DW_ProdFileProcessingJob = new byte[0];
    static byte[] commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PROJET_DW_ProdFileProcessingJob.length) {
				if(length < 1024 && commonByteArray_PROJET_DW_ProdFileProcessingJob.length == 0) {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[1024];
				} else {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length);
			strReturn = new String(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PROJET_DW_ProdFileProcessingJob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mainStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PROJET_DW_ProdFileProcessingJob = new byte[0];
    static byte[] commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PROJET_DW_ProdFileProcessingJob.length) {
				if(length < 1024 && commonByteArray_PROJET_DW_ProdFileProcessingJob.length == 0) {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[1024];
				} else {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length);
			strReturn = new String(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PROJET_DW_ProdFileProcessingJob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
mainStruct main = new mainStruct();
mainStruct row12 = main;






	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_4 = 0;
		





        int updateKeyCount_tDBOutput_4 = 1;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;

int rejectedCount_tDBOutput_4=0;

String tableName_tDBOutput_4 = "file_logcatcher";
boolean whetherReject_tDBOutput_4 = false;

java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
calendar_tDBOutput_4.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
calendar_tDBOutput_4.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
long date_tDBOutput_4;

java.sql.Connection conn_tDBOutput_4 = null;
		String dbProperties_tDBOutput_4 = "noDatetimeStringSync=true&useSSL=False&allowPublicKeyRetrieval=true";
		String url_tDBOutput_4 = null;
		if(dbProperties_tDBOutput_4 == null || dbProperties_tDBOutput_4.trim().length() == 0) {
			url_tDBOutput_4 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "store" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_4 = "noDatetimeStringSync=true&useSSL=False&allowPublicKeyRetrieval=true";
			if (!properties_tDBOutput_4.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_4 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_4 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "store" + "?" + properties_tDBOutput_4;
		}
		String driverClass_tDBOutput_4 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_4 = "root";
		

		 
	final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil.decryptPassword("1acf40cfe207fe162908c1916a83b9e5");

		String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;
		java.lang.Class.forName(driverClass_tDBOutput_4);
		
		conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4, dbUser_tDBOutput_4, dbPwd_tDBOutput_4);
		
	
	resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 10000;
        int commitCounter_tDBOutput_4 = 0;

int count_tDBOutput_4=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4.getMetaData();
                                boolean whetherExist_tDBOutput_4 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4.getTables("store", null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_4.next()) {
                                        String table_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_NAME");
                                        if(table_tDBOutput_4.equalsIgnoreCase("file_logcatcher")) {
                                            whetherExist_tDBOutput_4 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_4) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                                        stmtCreate_tDBOutput_4.execute("CREATE TABLE `" + tableName_tDBOutput_4 + "`(`moment` DATETIME ,`type` VARCHAR(0)  ,`origin` VARCHAR(0)  ,`message` VARCHAR(0)  ,`code` INT(0)  ,primary key(`moment`))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement("SELECT COUNT(1) FROM `" + "file_logcatcher" + "` WHERE `moment` = ?");
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    String insert_tDBOutput_4 = "INSERT INTO `" + "file_logcatcher" + "` (`moment`,`type`,`origin`,`message`,`code`) VALUES (?,?,?,?,?)";
	        
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);
	    String update_tDBOutput_4 = "UPDATE `" + "file_logcatcher" + "` SET `type` = ?,`origin` = ?,`message` = ?,`code` = ? WHERE `moment` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
	    resourceMap.put("pstmtUpdate_tDBOutput_4", pstmtUpdate_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("main" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
         class Util_tLogRow_3 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[5];

        public void addRow(String[] row) {

            for (int i = 0; i < 5; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 4 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
        util_tLogRow_3.setTableName("tLogRow_3");
        util_tLogRow_3.addRow(new String[]{"moment","type","origin","message","code",});        
 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
mainStruct main_tmp = new mainStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row6.type = lcm.getType();
		row6.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row6.priority = lcm.getPriority();
		row6.message = lcm.getMessage();
		row6.code = lcm.getCode();
		
		row6.moment = java.util.Calendar.getInstance().getTime();
	
    	row6.pid = pid;
		row6.root_pid = rootPid;
		row6.father_pid = fatherPid;
	
    	row6.project = projectName;
    	row6.job = jobName;
    	row6.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

main = null;


// # Output table : 'main'
main_tmp.moment = row6.moment ;
main_tmp.type = row6.type ;
main_tmp.origin = row6.origin ;
main_tmp.message = row6.message ;
main_tmp.code = row6.code ;
main = main_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "main"
if(main != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

			//main
			//main


			
				if(execStat){
					runStat.updateStatOnConnection("main"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						

				
				String[] row_tLogRow_3 = new String[5];
   				
	    		if(main.moment != null) { //              
                 row_tLogRow_3[0]=    						
								FormatterUtils.format_Date(main.moment, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(main.type != null) { //              
                 row_tLogRow_3[1]=    						    
				                String.valueOf(main.type)			
					          ;	
							
	    		} //			
    			   				
	    		if(main.origin != null) { //              
                 row_tLogRow_3[2]=    						    
				                String.valueOf(main.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(main.message != null) { //              
                 row_tLogRow_3[3]=    						    
				                String.valueOf(main.message)			
					          ;	
							
	    		} //			
    			   				
	    		if(main.code != null) { //              
                 row_tLogRow_3[4]=    						    
				                String.valueOf(main.code)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_3.addRow(row_tLogRow_3);	
				nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 
     row12 = main;


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_4 = false;
                    if(row12.moment != null) {
date_tDBOutput_4 = row12.moment.getTime();
if(date_tDBOutput_4 < year1_tDBOutput_4 || date_tDBOutput_4 >= year10000_tDBOutput_4) {
pstmt_tDBOutput_4.setString(1, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_4.setTimestamp(1, new java.sql.Timestamp(date_tDBOutput_4));
}
} else {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.DATE);
}

            int checkCount_tDBOutput_4 = -1;
            try (java.sql.ResultSet rs_tDBOutput_4 = pstmt_tDBOutput_4.executeQuery()) {
                while(rs_tDBOutput_4.next()) {
                    checkCount_tDBOutput_4 = rs_tDBOutput_4.getInt(1);
                }
            }
            if(checkCount_tDBOutput_4 > 0) {
                        if(row12.type == null) {
pstmtUpdate_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(1, row12.type);
}

                        if(row12.origin == null) {
pstmtUpdate_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(2, row12.origin);
}

                        if(row12.message == null) {
pstmtUpdate_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(3, row12.message);
}

                        if(row12.code == null) {
pstmtUpdate_tDBOutput_4.setNull(4, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_4.setInt(4, row12.code);
}

                        if(row12.moment != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(5 + count_tDBOutput_4, new java.sql.Timestamp(row12.moment.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(5 + count_tDBOutput_4, java.sql.Types.TIMESTAMP);
}

                try {
                    updatedCount_tDBOutput_4 = updatedCount_tDBOutput_4 + pstmtUpdate_tDBOutput_4.executeUpdate();
                    nb_line_tDBOutput_4++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_4 = true;
                        nb_line_tDBOutput_4++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(row12.moment != null) {
date_tDBOutput_4 = row12.moment.getTime();
if(date_tDBOutput_4 < year1_tDBOutput_4 || date_tDBOutput_4 >= year10000_tDBOutput_4) {
pstmtInsert_tDBOutput_4.setString(1, "0000-00-00 00:00:00");
} else {pstmtInsert_tDBOutput_4.setTimestamp(1, new java.sql.Timestamp(date_tDBOutput_4));
}
} else {
pstmtInsert_tDBOutput_4.setNull(1, java.sql.Types.DATE);
}

                        if(row12.type == null) {
pstmtInsert_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(2, row12.type);
}

                        if(row12.origin == null) {
pstmtInsert_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(3, row12.origin);
}

                        if(row12.message == null) {
pstmtInsert_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(4, row12.message);
}

                        if(row12.code == null) {
pstmtInsert_tDBOutput_4.setNull(5, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_4.setInt(5, row12.code);
}

                try {
                    insertedCount_tDBOutput_4 = insertedCount_tDBOutput_4 + pstmtInsert_tDBOutput_4.executeUpdate();
                    nb_line_tDBOutput_4++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_4 = true;
                        nb_line_tDBOutput_4++;
                            System.err.print(e.getMessage());
                }
            }
                commitCounter_tDBOutput_4++;

                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {

                    conn_tDBOutput_4.commit();
                    commitCounter_tDBOutput_4=0;

                }


 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "main"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_3 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    
                    consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
                    consoleOut_tLogRow_3.flush();
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("main"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



        if(pstmtUpdate_tDBOutput_4 != null){
            pstmtUpdate_tDBOutput_4.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_4");
        }
        if(pstmtInsert_tDBOutput_4 != null){
            pstmtInsert_tDBOutput_4.close();
            resourceMap.remove("pstmtInsert_tDBOutput_4");
        }
        if(pstmt_tDBOutput_4 != null) {
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
    	if (commitCounter_tDBOutput_4 > 0) {
    		
    		conn_tDBOutput_4.commit();
    		
    	}
    		
		
    	conn_tDBOutput_4 .close();
    	
    	resourceMap.put("finish_tDBOutput_4", true);
    	

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_4 = null;
                if ((pstmtUpdateToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_4")) != null) {
                    pstmtUpdateToClose_tDBOutput_4.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_4 = null;
                if ((pstmtInsertToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_4")) != null) {
                    pstmtInsertToClose_tDBOutput_4.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                    ctn_tDBOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_PROJET_DW_ProdFileProcessingJob = new byte[0];
    static byte[] commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PROJET_DW_ProdFileProcessingJob.length) {
				if(length < 1024 && commonByteArray_PROJET_DW_ProdFileProcessingJob.length == 0) {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[1024];
				} else {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length);
			strReturn = new String(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PROJET_DW_ProdFileProcessingJob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class toseetheoutputStruct implements routines.system.IPersistableRow<toseetheoutputStruct> {
    final static byte[] commonByteArrayLock_PROJET_DW_ProdFileProcessingJob = new byte[0];
    static byte[] commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PROJET_DW_ProdFileProcessingJob.length) {
				if(length < 1024 && commonByteArray_PROJET_DW_ProdFileProcessingJob.length == 0) {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[1024];
				} else {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length);
			strReturn = new String(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PROJET_DW_ProdFileProcessingJob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(toseetheoutputStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_PROJET_DW_ProdFileProcessingJob = new byte[0];
    static byte[] commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PROJET_DW_ProdFileProcessingJob.length) {
				if(length < 1024 && commonByteArray_PROJET_DW_ProdFileProcessingJob.length == 0) {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[1024];
				} else {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length);
			strReturn = new String(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PROJET_DW_ProdFileProcessingJob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();
toseetheoutputStruct toseetheoutput = new toseetheoutputStruct();
toseetheoutputStruct row11 = toseetheoutput;






	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_5 = 0;
		





        int updateKeyCount_tDBOutput_5 = 1;
        if(updateKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;

int rejectedCount_tDBOutput_5=0;

String tableName_tDBOutput_5 = "file_log_flowmeter";
boolean whetherReject_tDBOutput_5 = false;

java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar.getInstance();
calendar_tDBOutput_5.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_5 = calendar_tDBOutput_5.getTime().getTime();
calendar_tDBOutput_5.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_5 = calendar_tDBOutput_5.getTime().getTime();
long date_tDBOutput_5;

java.sql.Connection conn_tDBOutput_5 = null;
		String dbProperties_tDBOutput_5 = "noDatetimeStringSync=true&useSSL=False&allowPublicKeyRetrieval=true";
		String url_tDBOutput_5 = null;
		if(dbProperties_tDBOutput_5 == null || dbProperties_tDBOutput_5.trim().length() == 0) {
			url_tDBOutput_5 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "store" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_5 = "noDatetimeStringSync=true&useSSL=False&allowPublicKeyRetrieval=true";
			if (!properties_tDBOutput_5.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_5 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_5 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "store" + "?" + properties_tDBOutput_5;
		}
		String driverClass_tDBOutput_5 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_5 = "root";
		

		 
	final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil.decryptPassword("1acf40cfe207fe162908c1916a83b9e5");

		String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;
		java.lang.Class.forName(driverClass_tDBOutput_5);
		
		conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5, dbUser_tDBOutput_5, dbPwd_tDBOutput_5);
		
	
	resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
        conn_tDBOutput_5.setAutoCommit(false);
        int commitEvery_tDBOutput_5 = 10000;
        int commitCounter_tDBOutput_5 = 0;

int count_tDBOutput_5=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_5 = conn_tDBOutput_5.getMetaData();
                                boolean whetherExist_tDBOutput_5 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_5 = dbMetaData_tDBOutput_5.getTables("store", null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_5.next()) {
                                        String table_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_NAME");
                                        if(table_tDBOutput_5.equalsIgnoreCase("file_log_flowmeter")) {
                                            whetherExist_tDBOutput_5 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_5) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                                        stmtCreate_tDBOutput_5.execute("CREATE TABLE `" + tableName_tDBOutput_5 + "`(`moment` DATETIME ,`pid` VARCHAR(20)  ,`father_pid` VARCHAR(20)  ,`root_pid` VARCHAR(20)  ,`system_pid` BIGINT(8)  ,`project` VARCHAR(50)  ,`job` VARCHAR(255)  ,`job_repository_id` VARCHAR(255)  ,`job_version` VARCHAR(255)  ,`context` VARCHAR(50)  ,`origin` VARCHAR(255)  ,`label` VARCHAR(255)  ,`count` INT(3)  ,`reference` INT(3)  ,`thresholds` VARCHAR(255)  ,primary key(`moment`))");
                                    }
                                }
	    String update_tDBOutput_5 = "UPDATE `" + "file_log_flowmeter" + "` SET `pid` = ?,`father_pid` = ?,`root_pid` = ?,`system_pid` = ?,`project` = ?,`job` = ?,`job_repository_id` = ?,`job_version` = ?,`context` = ?,`origin` = ?,`label` = ?,`count` = ?,`reference` = ?,`thresholds` = ? WHERE `moment` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(update_tDBOutput_5);
	    resourceMap.put("pstmtUpdate_tDBOutput_5", pstmtUpdate_tDBOutput_5);
	    String insert_tDBOutput_5 = "INSERT INTO `" + "file_log_flowmeter" + "` (`moment`,`pid`,`father_pid`,`root_pid`,`system_pid`,`project`,`job`,`job_repository_id`,`job_version`,`context`,`origin`,`label`,`count`,`reference`,`thresholds`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	         
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmtInsert_tDBOutput_5", pstmtInsert_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("toseetheoutput" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
		java.io.PrintStream consoleOut_tLogRow_4 = null;	

 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	String var1;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
toseetheoutputStruct toseetheoutput_tmp = new toseetheoutputStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		row10.pid = pid;
		row10.root_pid = rootPid;
		row10.father_pid = fatherPid;	
        row10.project = projectName;
        row10.job = jobName;
        row10.context = contextStr;
		row10.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row10.moment = mcm.getMoment();
		row10.job_version = mcm.getJobVersion();
		row10.job_repository_id = mcm.getJobId();
		row10.system_pid = mcm.getSystemPid();
		row10.label = mcm.getLabel();
		row10.count = mcm.getCount();
		row10.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		row10.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.var1 = null;// ###############################
        // ###############################
        // # Output tables

toseetheoutput = null;


// # Output table : 'toseetheoutput'
toseetheoutput_tmp.moment = row10.moment ;
toseetheoutput_tmp.pid = row10.pid ;
toseetheoutput_tmp.father_pid = row10.father_pid ;
toseetheoutput_tmp.root_pid = row10.root_pid ;
toseetheoutput_tmp.system_pid = row10.system_pid ;
toseetheoutput_tmp.project = row10.project ;
toseetheoutput_tmp.job = row10.job ;
toseetheoutput_tmp.job_repository_id = row10.job_repository_id ;
toseetheoutput_tmp.job_version = row10.job_version ;
toseetheoutput_tmp.context = row10.context ;
toseetheoutput_tmp.origin = row10.origin ;
toseetheoutput_tmp.label = row10.label ;
toseetheoutput_tmp.count = row10.count ;
toseetheoutput_tmp.reference = row10.reference ;
toseetheoutput_tmp.thresholds = row10.thresholds ;
toseetheoutput = toseetheoutput_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "toseetheoutput"
if(toseetheoutput != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

			//toseetheoutput
			//toseetheoutput


			
				if(execStat){
					runStat.updateStatOnConnection("toseetheoutput"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_4 = new StringBuilder();




   				
	    		if(toseetheoutput.moment != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
								FormatterUtils.format_Date(toseetheoutput.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(toseetheoutput.pid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(toseetheoutput.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(toseetheoutput.father_pid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(toseetheoutput.father_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(toseetheoutput.root_pid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(toseetheoutput.root_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(toseetheoutput.system_pid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(toseetheoutput.system_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(toseetheoutput.project != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(toseetheoutput.project)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(toseetheoutput.job != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(toseetheoutput.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(toseetheoutput.job_repository_id != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(toseetheoutput.job_repository_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(toseetheoutput.job_version != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(toseetheoutput.job_version)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(toseetheoutput.context != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(toseetheoutput.context)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(toseetheoutput.origin != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(toseetheoutput.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(toseetheoutput.label != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(toseetheoutput.label)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(toseetheoutput.count != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(toseetheoutput.count)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(toseetheoutput.reference != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(toseetheoutput.reference)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(toseetheoutput.thresholds != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(toseetheoutput.thresholds)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
                    consoleOut_tLogRow_4.flush();
                    nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 
     row11 = toseetheoutput;


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_5 = false;
            int updateFlag_tDBOutput_5=0;
                    if(row11.pid == null) {
pstmtUpdate_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(1, row11.pid);
}

                    if(row11.father_pid == null) {
pstmtUpdate_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(2, row11.father_pid);
}

                    if(row11.root_pid == null) {
pstmtUpdate_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(3, row11.root_pid);
}

                    if(row11.system_pid == null) {
pstmtUpdate_tDBOutput_5.setNull(4, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_5.setLong(4, row11.system_pid);
}

                    if(row11.project == null) {
pstmtUpdate_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(5, row11.project);
}

                    if(row11.job == null) {
pstmtUpdate_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(6, row11.job);
}

                    if(row11.job_repository_id == null) {
pstmtUpdate_tDBOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(7, row11.job_repository_id);
}

                    if(row11.job_version == null) {
pstmtUpdate_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(8, row11.job_version);
}

                    if(row11.context == null) {
pstmtUpdate_tDBOutput_5.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(9, row11.context);
}

                    if(row11.origin == null) {
pstmtUpdate_tDBOutput_5.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(10, row11.origin);
}

                    if(row11.label == null) {
pstmtUpdate_tDBOutput_5.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(11, row11.label);
}

                    if(row11.count == null) {
pstmtUpdate_tDBOutput_5.setNull(12, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_5.setInt(12, row11.count);
}

                    if(row11.reference == null) {
pstmtUpdate_tDBOutput_5.setNull(13, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_5.setInt(13, row11.reference);
}

                    if(row11.thresholds == null) {
pstmtUpdate_tDBOutput_5.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(14, row11.thresholds);
}


                    if(row11.moment != null) {
pstmtUpdate_tDBOutput_5.setTimestamp(15 + count_tDBOutput_5, new java.sql.Timestamp(row11.moment.getTime()));
} else {
pstmtUpdate_tDBOutput_5.setNull(15 + count_tDBOutput_5, java.sql.Types.TIMESTAMP);
}


            try {
                updateFlag_tDBOutput_5=pstmtUpdate_tDBOutput_5.executeUpdate();
                updatedCount_tDBOutput_5 = updatedCount_tDBOutput_5+updateFlag_tDBOutput_5;

            if(updateFlag_tDBOutput_5 == 0) {

                        if(row11.moment != null) {
date_tDBOutput_5 = row11.moment.getTime();
if(date_tDBOutput_5 < year1_tDBOutput_5 || date_tDBOutput_5 >= year10000_tDBOutput_5) {
pstmtInsert_tDBOutput_5.setString(1, "0000-00-00 00:00:00");
} else {pstmtInsert_tDBOutput_5.setTimestamp(1, new java.sql.Timestamp(date_tDBOutput_5));
}
} else {
pstmtInsert_tDBOutput_5.setNull(1, java.sql.Types.DATE);
}

                        if(row11.pid == null) {
pstmtInsert_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(2, row11.pid);
}

                        if(row11.father_pid == null) {
pstmtInsert_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(3, row11.father_pid);
}

                        if(row11.root_pid == null) {
pstmtInsert_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(4, row11.root_pid);
}

                        if(row11.system_pid == null) {
pstmtInsert_tDBOutput_5.setNull(5, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_5.setLong(5, row11.system_pid);
}

                        if(row11.project == null) {
pstmtInsert_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(6, row11.project);
}

                        if(row11.job == null) {
pstmtInsert_tDBOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(7, row11.job);
}

                        if(row11.job_repository_id == null) {
pstmtInsert_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(8, row11.job_repository_id);
}

                        if(row11.job_version == null) {
pstmtInsert_tDBOutput_5.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(9, row11.job_version);
}

                        if(row11.context == null) {
pstmtInsert_tDBOutput_5.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(10, row11.context);
}

                        if(row11.origin == null) {
pstmtInsert_tDBOutput_5.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(11, row11.origin);
}

                        if(row11.label == null) {
pstmtInsert_tDBOutput_5.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(12, row11.label);
}

                        if(row11.count == null) {
pstmtInsert_tDBOutput_5.setNull(13, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_5.setInt(13, row11.count);
}

                        if(row11.reference == null) {
pstmtInsert_tDBOutput_5.setNull(14, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_5.setInt(14, row11.reference);
}

                        if(row11.thresholds == null) {
pstmtInsert_tDBOutput_5.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(15, row11.thresholds);
}

                    insertedCount_tDBOutput_5 = insertedCount_tDBOutput_5 + pstmtInsert_tDBOutput_5.executeUpdate();
                    nb_line_tDBOutput_5++;
                }else{
                    nb_line_tDBOutput_5++;
             }
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_5 = true;
                        nb_line_tDBOutput_5++;
                            System.err.print(e.getMessage());
                }
                commitCounter_tDBOutput_5++;

                if(commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {

                    conn_tDBOutput_5.commit();
                    commitCounter_tDBOutput_5=0;

                }


 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "toseetheoutput"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("toseetheoutput"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



        if(pstmtUpdate_tDBOutput_5 != null){
            pstmtUpdate_tDBOutput_5.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_5");
        }
        if(pstmtInsert_tDBOutput_5 != null){
            pstmtInsert_tDBOutput_5.close();
            resourceMap.remove("pstmtInsert_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);
    	if (commitCounter_tDBOutput_5 > 0) {
    		
    		conn_tDBOutput_5.commit();
    		
    	}
    		
		
    	conn_tDBOutput_5 .close();
    	
    	resourceMap.put("finish_tDBOutput_5", true);
    	

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_5 = null;
                if ((pstmtUpdateToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_5")) != null) {
                    pstmtUpdateToClose_tDBOutput_5.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_5 = null;
                if ((pstmtInsertToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_5")) != null) {
                    pstmtInsertToClose_tDBOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_5") == null){
            java.sql.Connection ctn_tDBOutput_5 = null;
            if((ctn_tDBOutput_5 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_5")) != null){
                try {
                    ctn_tDBOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_5) {
                    String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :" + sqlEx_tDBOutput_5.getMessage();
                    System.err.println(errorMessage_tDBOutput_5);
                }
            }
        }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_PROJET_DW_ProdFileProcessingJob = new byte[0];
    static byte[] commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[0];

	
			    public Integer slno;

				public Integer getSlno () {
					return this.slno;
				}
				
			    public String account_id;

				public String getAccount_id () {
					return this.account_id;
				}
				
			    public Integer district_id;

				public Integer getDistrict_id () {
					return this.district_id;
				}
				
			    public String frequency;

				public String getFrequency () {
					return this.frequency;
				}
				
			    public String parseddate;

				public String getParseddate () {
					return this.parseddate;
				}
				
			    public Integer year;

				public Integer getYear () {
					return this.year;
				}
				
			    public Integer month;

				public Integer getMonth () {
					return this.month;
				}
				
			    public Integer day;

				public Integer getDay () {
					return this.day;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public String smoker;

				public String getSmoker () {
					return this.smoker;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PROJET_DW_ProdFileProcessingJob.length) {
				if(length < 1024 && commonByteArray_PROJET_DW_ProdFileProcessingJob.length == 0) {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[1024];
				} else {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length);
			strReturn = new String(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PROJET_DW_ProdFileProcessingJob) {

        	try {

        		int length = 0;
		
						this.slno = readInteger(dis);
					
					this.account_id = readString(dis);
					
						this.district_id = readInteger(dis);
					
					this.frequency = readString(dis);
					
					this.parseddate = readString(dis);
					
						this.year = readInteger(dis);
					
						this.month = readInteger(dis);
					
						this.day = readInteger(dis);
					
					this.gender = readString(dis);
					
					this.smoker = readString(dis);
					
					this.Country = readString(dis);
					
					this.Region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.slno,dos);
					
					// String
				
						writeString(this.account_id,dos);
					
					// Integer
				
						writeInteger(this.district_id,dos);
					
					// String
				
						writeString(this.frequency,dos);
					
					// String
				
						writeString(this.parseddate,dos);
					
					// Integer
				
						writeInteger(this.year,dos);
					
					// Integer
				
						writeInteger(this.month,dos);
					
					// Integer
				
						writeInteger(this.day,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// String
				
						writeString(this.smoker,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.Region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("slno="+String.valueOf(slno));
		sb.append(",account_id="+account_id);
		sb.append(",district_id="+String.valueOf(district_id));
		sb.append(",frequency="+frequency);
		sb.append(",parseddate="+parseddate);
		sb.append(",year="+String.valueOf(year));
		sb.append(",month="+String.valueOf(month));
		sb.append(",day="+String.valueOf(day));
		sb.append(",gender="+gender);
		sb.append(",smoker="+smoker);
		sb.append(",Country="+Country);
		sb.append(",Region="+Region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PROJET_DW_ProdFileProcessingJob = new byte[0];
    static byte[] commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[0];

	
			    public Integer slno;

				public Integer getSlno () {
					return this.slno;
				}
				
			    public String account_id;

				public String getAccount_id () {
					return this.account_id;
				}
				
			    public Integer district_id;

				public Integer getDistrict_id () {
					return this.district_id;
				}
				
			    public String frequency;

				public String getFrequency () {
					return this.frequency;
				}
				
			    public String parseddate;

				public String getParseddate () {
					return this.parseddate;
				}
				
			    public Integer year;

				public Integer getYear () {
					return this.year;
				}
				
			    public Integer month;

				public Integer getMonth () {
					return this.month;
				}
				
			    public Integer day;

				public Integer getDay () {
					return this.day;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public String smoker;

				public String getSmoker () {
					return this.smoker;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PROJET_DW_ProdFileProcessingJob.length) {
				if(length < 1024 && commonByteArray_PROJET_DW_ProdFileProcessingJob.length == 0) {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[1024];
				} else {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length);
			strReturn = new String(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PROJET_DW_ProdFileProcessingJob) {

        	try {

        		int length = 0;
		
						this.slno = readInteger(dis);
					
					this.account_id = readString(dis);
					
						this.district_id = readInteger(dis);
					
					this.frequency = readString(dis);
					
					this.parseddate = readString(dis);
					
						this.year = readInteger(dis);
					
						this.month = readInteger(dis);
					
						this.day = readInteger(dis);
					
					this.gender = readString(dis);
					
					this.smoker = readString(dis);
					
					this.Country = readString(dis);
					
					this.Region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.slno,dos);
					
					// String
				
						writeString(this.account_id,dos);
					
					// Integer
				
						writeInteger(this.district_id,dos);
					
					// String
				
						writeString(this.frequency,dos);
					
					// String
				
						writeString(this.parseddate,dos);
					
					// Integer
				
						writeInteger(this.year,dos);
					
					// Integer
				
						writeInteger(this.month,dos);
					
					// Integer
				
						writeInteger(this.day,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// String
				
						writeString(this.smoker,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.Region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("slno="+String.valueOf(slno));
		sb.append(",account_id="+account_id);
		sb.append(",district_id="+String.valueOf(district_id));
		sb.append(",frequency="+frequency);
		sb.append(",parseddate="+parseddate);
		sb.append(",year="+String.valueOf(year));
		sb.append(",month="+String.valueOf(month));
		sb.append(",day="+String.valueOf(day));
		sb.append(",gender="+gender);
		sb.append(",smoker="+smoker);
		sb.append(",Country="+Country);
		sb.append(",Region="+Region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PROJET_DW_ProdFileProcessingJob = new byte[0];
    static byte[] commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[0];

	
			    public Integer slno;

				public Integer getSlno () {
					return this.slno;
				}
				
			    public String account_id;

				public String getAccount_id () {
					return this.account_id;
				}
				
			    public Integer district_id;

				public Integer getDistrict_id () {
					return this.district_id;
				}
				
			    public String frequency;

				public String getFrequency () {
					return this.frequency;
				}
				
			    public String parseddate;

				public String getParseddate () {
					return this.parseddate;
				}
				
			    public Integer year;

				public Integer getYear () {
					return this.year;
				}
				
			    public Integer month;

				public Integer getMonth () {
					return this.month;
				}
				
			    public Integer day;

				public Integer getDay () {
					return this.day;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public String smoker;

				public String getSmoker () {
					return this.smoker;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PROJET_DW_ProdFileProcessingJob.length) {
				if(length < 1024 && commonByteArray_PROJET_DW_ProdFileProcessingJob.length == 0) {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[1024];
				} else {
   					commonByteArray_PROJET_DW_ProdFileProcessingJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length);
			strReturn = new String(commonByteArray_PROJET_DW_ProdFileProcessingJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PROJET_DW_ProdFileProcessingJob) {

        	try {

        		int length = 0;
		
						this.slno = readInteger(dis);
					
					this.account_id = readString(dis);
					
						this.district_id = readInteger(dis);
					
					this.frequency = readString(dis);
					
					this.parseddate = readString(dis);
					
						this.year = readInteger(dis);
					
						this.month = readInteger(dis);
					
						this.day = readInteger(dis);
					
					this.gender = readString(dis);
					
					this.smoker = readString(dis);
					
					this.Country = readString(dis);
					
					this.Region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.slno,dos);
					
					// String
				
						writeString(this.account_id,dos);
					
					// Integer
				
						writeInteger(this.district_id,dos);
					
					// String
				
						writeString(this.frequency,dos);
					
					// String
				
						writeString(this.parseddate,dos);
					
					// Integer
				
						writeInteger(this.year,dos);
					
					// Integer
				
						writeInteger(this.month,dos);
					
					// Integer
				
						writeInteger(this.day,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// String
				
						writeString(this.smoker,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.Region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("slno="+String.valueOf(slno));
		sb.append(",account_id="+account_id);
		sb.append(",district_id="+String.valueOf(district_id));
		sb.append(",frequency="+frequency);
		sb.append(",parseddate="+parseddate);
		sb.append(",year="+String.valueOf(year));
		sb.append(",month="+String.valueOf(month));
		sb.append(",day="+String.valueOf(day));
		sb.append(",gender="+gender);
		sb.append(",smoker="+smoker);
		sb.append(",Country="+Country);
		sb.append(",Region="+Region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tIterateToFlow_1_AIProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tIterateToFlow_1_AI_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row1Struct row4 = row1;
row1Struct row7 = row1;






	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		





        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;

int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "t_insurence_detail";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
		String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true&useSSL=False&allowPublicKeyRetrieval=true";
		String url_tDBOutput_1 = null;
		if(dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
			url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "store" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_1 = "noDatetimeStringSync=true&useSSL=False&allowPublicKeyRetrieval=true";
			if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "store" + "?" + properties_tDBOutput_1;
		}
		String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_1 = "root";
		

		 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("1acf40cfe207fe162908c1916a83b9e5");

		String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
		java.lang.Class.forName(driverClass_tDBOutput_1);
		
		conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
		
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;

int count_tDBOutput_1=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables("store", null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tDBOutput_1.next()) {
                                        String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
                                        if(table_tDBOutput_1.equalsIgnoreCase("t_insurence_detail")) {
                                            whetherExist_tDBOutput_1 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtDrop_tDBOutput_1.execute("DROP TABLE `" + tableName_tDBOutput_1 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1 + "`(`slno` INT(2)  ,`account_id` VARCHAR(9)  ,`district_id` INT(2)  ,`frequency` VARCHAR(26)  ,`parseddate` VARCHAR(20)  ,`year` INT(4)  ,`month` INT(1)  ,`day` INT(2)  ,`gender` VARCHAR(6)  ,`smoker` VARCHAR(3)  ,`Country` VARCHAR(100)  ,`Region` VARCHAR(100)  ,primary key(`slno`))");
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM `" + "t_insurence_detail" + "` WHERE `slno` = ?");
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO `" + "t_insurence_detail" + "` (`slno`,`account_id`,`district_id`,`frequency`,`parseddate`,`year`,`month`,`day`,`gender`,`smoker`,`Country`,`Region`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
	        
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    String update_tDBOutput_1 = "UPDATE `" + "t_insurence_detail" + "` SET `account_id` = ?,`district_id` = ?,`frequency` = ?,`parseddate` = ?,`year` = ?,`month` = ?,`day` = ?,`gender` = ?,`smoker` = ?,`Country` = ?,`Region` = ? WHERE `slno` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tFlowMeter_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeter_9", false);
		start_Hash.put("tFlowMeter_9", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeter_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFlowMeter_9 = 0;
		

    int count_tFlowMeter_9 = 0; 
 



/**
 * [tFlowMeter_9 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[12];

        public void addRow(String[] row) {

            for (int i = 0; i < 12; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 11 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 11 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[11] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"slno","account_id","district_id","frequency","parseddate","year","month","day","gender","smoker","Country","Region",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tIterateToFlow_1_AI begin ] start
	 */

	

	
		
		ok_Hash.put("tIterateToFlow_1_AI", false);
		start_Hash.put("tIterateToFlow_1_AI", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_AI";

	
		int tos_count_tIterateToFlow_1_AI = 0;
		

        
        int nb_line_tIterateToFlow_1_AI = 0;
        java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_AI = (java.util.List<OnSubjobOkStructtIterateToFlow_1>)globalMap.get("tIterateToFlow_1");
        if(list_tIterateToFlow_1_AI == null) {
            list_tIterateToFlow_1_AI = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_1>();
        }        
        for(OnSubjobOkStructtIterateToFlow_1 row_tIterateToFlow_1_AI : list_tIterateToFlow_1_AI){
        					
    						row1.slno = row_tIterateToFlow_1_AI.slno;
    											
    						row1.account_id = row_tIterateToFlow_1_AI.account_id;
    											
    						row1.district_id = row_tIterateToFlow_1_AI.district_id;
    											
    						row1.frequency = row_tIterateToFlow_1_AI.frequency;
    											
    						row1.parseddate = row_tIterateToFlow_1_AI.parseddate;
    											
    						row1.year = row_tIterateToFlow_1_AI.year;
    											
    						row1.month = row_tIterateToFlow_1_AI.month;
    											
    						row1.day = row_tIterateToFlow_1_AI.day;
    											
    						row1.gender = row_tIterateToFlow_1_AI.gender;
    											
    						row1.smoker = row_tIterateToFlow_1_AI.smoker;
    											
    						row1.Country = row_tIterateToFlow_1_AI.Country;
    											
    						row1.Region = row_tIterateToFlow_1_AI.Region;
    						

 



/**
 * [tIterateToFlow_1_AI begin ] stop
 */
	
	/**
	 * [tIterateToFlow_1_AI main ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_AI";

	

 


	tos_count_tIterateToFlow_1_AI++;

/**
 * [tIterateToFlow_1_AI main ] stop
 */
	
	/**
	 * [tIterateToFlow_1_AI process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_AI";

	

 



/**
 * [tIterateToFlow_1_AI process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[12];
   				
	    		if(row1.slno != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(row1.slno)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.account_id != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(row1.account_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.district_id != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(row1.district_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.frequency != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(row1.frequency)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.parseddate != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(row1.parseddate)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.year != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(row1.year)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.month != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(row1.month)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.day != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(row1.day)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.gender != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(row1.gender)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.smoker != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(row1.smoker)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.Country != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(row1.Country)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.Region != null) { //              
                 row_tLogRow_1[11]=    						    
				                String.valueOf(row1.Region)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row4 = row1;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tFlowMeter_9 main ] start
	 */

	

	
	
	currentComponent="tFlowMeter_9";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		

    count_tFlowMeter_9++; 
 
     row7 = row4;


	tos_count_tFlowMeter_9++;

/**
 * [tFlowMeter_9 main ] stop
 */
	
	/**
	 * [tFlowMeter_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeter_9";

	

 



/**
 * [tFlowMeter_9 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;
                    if(row7.slno == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(1, row7.slno);
}

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        if(row7.account_id == null) {
pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(1, row7.account_id);
}

                        if(row7.district_id == null) {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(2, row7.district_id);
}

                        if(row7.frequency == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(3, row7.frequency);
}

                        if(row7.parseddate == null) {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(4, row7.parseddate);
}

                        if(row7.year == null) {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(5, row7.year);
}

                        if(row7.month == null) {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(6, row7.month);
}

                        if(row7.day == null) {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(7, row7.day);
}

                        if(row7.gender == null) {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(8, row7.gender);
}

                        if(row7.smoker == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(9, row7.smoker);
}

                        if(row7.Country == null) {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(10, row7.Country);
}

                        if(row7.Region == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(11, row7.Region);
}

                        if(row7.slno == null) {
pstmtUpdate_tDBOutput_1.setNull(12 + count_tDBOutput_1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(12 + count_tDBOutput_1, row7.slno);
}

                try {
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(row7.slno == null) {
pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(1, row7.slno);
}

                        if(row7.account_id == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(2, row7.account_id);
}

                        if(row7.district_id == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(3, row7.district_id);
}

                        if(row7.frequency == null) {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(4, row7.frequency);
}

                        if(row7.parseddate == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(5, row7.parseddate);
}

                        if(row7.year == null) {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(6, row7.year);
}

                        if(row7.month == null) {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(7, row7.month);
}

                        if(row7.day == null) {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(8, row7.day);
}

                        if(row7.gender == null) {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(9, row7.gender);
}

                        if(row7.smoker == null) {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(10, row7.smoker);
}

                        if(row7.Country == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(11, row7.Country);
}

                        if(row7.Region == null) {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(12, row7.Region);
}

                try {
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_1) {
            }
                commitCounter_tDBOutput_1++;

                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                    conn_tDBOutput_1.commit();
                    commitCounter_tDBOutput_1=0;

                }


 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeter_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_9";

	

 



/**
 * [tFlowMeter_9 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tIterateToFlow_1_AI process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_AI";

	

 



/**
 * [tIterateToFlow_1_AI process_data_end ] stop
 */
	
	/**
	 * [tIterateToFlow_1_AI end ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_AI";

	
	nb_line_tIterateToFlow_1_AI++;
}
globalMap.put("tIterateToFlow_1_AI_NB_LINE",nb_line_tIterateToFlow_1_AI);
 

ok_Hash.put("tIterateToFlow_1_AI", true);
end_Hash.put("tIterateToFlow_1_AI", System.currentTimeMillis());




/**
 * [tIterateToFlow_1_AI end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tFlowMeter_9 end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_9";

	

	tFlowMeterCatcher_1.addMessage("row4", new Integer(count_tFlowMeter_9), "null", "newline|0|80|255|0|0#newline|0|80|0|64|0#newline|0|80|255|128|0", "tFlowMeter_9");

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFlowMeter_9", true);
end_Hash.put("tFlowMeter_9", System.currentTimeMillis());




/**
 * [tFlowMeter_9 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
    	if (commitCounter_tDBOutput_1 > 0) {
    		
    		conn_tDBOutput_1.commit();
    		
    	}
    		
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tChronometerStop_1Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */









				}//end the resume

				
							tFlowMeterCatcher_1Process(globalMap);
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tIterateToFlow_1_AI"
							globalMap.remove("tIterateToFlow_1");
						
				try{
					
	
	/**
	 * [tIterateToFlow_1_AI finally ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_AI";

	

 



/**
 * [tIterateToFlow_1_AI finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tFlowMeter_9 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeter_9";

	

 



/**
 * [tFlowMeter_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tIterateToFlow_1_AI_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final ProdFileProcessingJob ProdFileProcessingJobClass = new ProdFileProcessingJob();

        int exitCode = ProdFileProcessingJobClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ProdFileProcessingJob.class.getClassLoader().getResourceAsStream("projet_dw/prodfileprocessingjob_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ProdFileProcessingJob.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRunJob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_1) {
globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);

e_tRunJob_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ProdFileProcessingJob");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     350213 characters generated by Talend Open Studio for Data Integration 
 *     on the January 23, 2023 6:27:22 AM IST
 ************************************************************************************************/